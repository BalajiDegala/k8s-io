
# Storage Class
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
  namespace: ayon
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

---

# Persistent Volumes and Claims
# Postgres
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 5Gi
  accessModes: [ReadWriteOnce]
  storageClassName: local-storage
  hostPath:
    path: /data/ayon-postgres
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ayon
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-storage

# Storage
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: storage-pv
spec:
  capacity:
    storage: 5Gi
  accessModes: [ReadWriteMany]
  storageClassName: local-storage
  hostPath:
    path: /data/ayon-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: storage-pvc
  namespace: ayon
spec:
  accessModes: [ReadWriteMany]
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-storage

---

# Postgres Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: ayon
type: Opaque
data:
  POSTGRES_USER: YXlvbg==
  POSTGRES_PASSWORD: YXlvbg==
  POSTGRES_DB: YXlvbg==

---

# Postgres Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: ayon
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP

---

# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: ayon
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
      - name: init-permissions
        image: busybox
        command: ['sh', '-c', 'chown -R 999:999 /var/lib/postgresql/data']
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: postgres-data
            mountPath: /var/lib/postgresql/data
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec: { command: ["pg_isready", "-U", "ayon"] }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec: { command: ["pg_isready", "-U", "ayon"] }
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc

---

# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: ayon
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP

---

# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ayon
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
      containers:
        - name: redis
          image: redis:alpine
          ports:
            - containerPort: 6379
          readinessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"

---

# Server Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: ayon
spec:
  selector:
    app: server
  ports:
    - port: 5000
      targetPort: 5000
  type: ClusterIP

---

# Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: ayon
spec:
  replicas: 3
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: server
          image: ynput/ayon:latest
          ports:
            - containerPort: 5000
          readinessProbe:
            httpGet:
              path: /api/info
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/info
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 20
          env:
          - name: REDIS__HOST
            value: "redis"
          - name: POSTGRES__HOST
            value: postgres
          volumeMounts:
            - mountPath: /addons
              name: addons-volume
            - mountPath: /storage
              name: storage-volume
            - mountPath: /var/run
              name: var-run
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "1"
              memory: "2Gi"
      volumes:
        - name: addons-volume
          emptyDir: {}
        - name: var-run
          emptyDir: {}
        - name: storage-volume
          persistentVolumeClaim:

---

# Ingress Resource for Server
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: server-ingress
  namespace: ayon
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ayon.local
      secretName: ayon-tls
  rules:
    - host: ayon.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: server
                port:
                  number: 5000


# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-server-to-postgres
#   namespace: ayon
# spec:
#   podSelector:
#     matchLabels:
#       app: postgres
#   ingress:
#   - from:
#     - podSelector:
#         matchLabels:
#           app: server


# kubectl create namespace ayon # 

# kubectl create secret tls ayon-tls \
#   --cert=tls.crt \
#   --key=tls.key \
#   -n ayon


# openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
#   -keyout tls.key \
#   -out tls.crt \
#   -subj "/CN=ayon.local/O=ayon"
